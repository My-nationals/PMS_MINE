generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED
}

enum PasswordResetStatus {
  PENDING
  IDLE
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}

model User {
  id                   String              @id @default(uuid())
  names                String
  email                String              @unique
  telephone            String?             @unique
  password             String
  profilePicture       String              @default("https://firebasestorage.googleapis.com/v0/b/relaxia-services.appspot.com/o/relaxia-profiles%2Fblank-profile-picture-973460_960_720.webp?alt=media") @map("profile_picture")
  role                 Role                @default(USER)
  verificationStatus   VerificationStatus  @default(UNVERIFIED) @map("verification_status")
  verificationCode     String?             @map("verification_code")
  verificationExpires  DateTime?           @map("verification_expires")
  passwordResetStatus  PasswordResetStatus @default(IDLE) @map("password_reset_status")
  passwordResetCode    String?             @map("password_reset_code")
  passwordResetExpires DateTime?           @map("password_reset_expires")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  assignedSlotId       String?             @unique
  assignedSlot         Slot?               @relation("UserAssignedSlot", fields: [assignedSlotId], references: [id])

  parkingRequests ParkingRequest[]
  vehicles        Vehicle[] // âœ… <-- Added this line

  @@map("users")
}

model Slot {
  id          String   @id @default(uuid())
  code        String   @unique
  occupied    Boolean? @default(false)
  description String?
  userId      String?
  user        User?    @relation("UserAssignedSlot")

  parkingRequests ParkingRequest[] @relation("SlotToParkingRequests") // ðŸ‘ˆ add this

  @@map("slots")
}

model ParkingRequest {
  id        String   @id @default(uuid())
  userId    String
  vehicleId String
  slotId    String?  // Assigned upon approval
  status    String
  createdAt DateTime @default(now())

  entryTime DateTime @default(now())
  exitTime  DateTime?

  user    User    @relation(fields: [userId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  slot    Slot?   @relation("SlotToParkingRequests", fields: [slotId], references: [id])
}



model Vehicle {
  id        String   @id @default(uuid())
  plate     String   @unique
  type      String
  color     String?    
  model     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User             @relation(fields: [userId], references: [id])
  requests ParkingRequest[]

  @@map("vehicles")
}
